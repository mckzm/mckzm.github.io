---
layout: post
title:  "Epilogue"
date:   2024-10-09 00:00:00 +0900
categories: rc category_theory rust haskell ml mathematics
---

It's been over 2 weeks since I completed my batch at the [Recurse
Center](https://www.recurse.com/) (RC for short), so it's probably high time I
got over writer's block and posted something about it on my shiny new blog!
This won't (yet) be a proper Return Statement, as I'll need to review the
copious amount of notes I took during my batch before I feel ready to draft
one. In the meantime, I'll jot down some pseudo-random thoughts.

Truth is, [one never
graduates](https://www.recurse.com/manual#sub-sec-never-graduate) from RC.
Which is great, because I wouldn't want to! My batch was a wonderfully
delightful experience, both socially and technically. Being part of such a
kind, enthusiastic, and supportive community has been immensely energising and
fun.  Thanks to my fellow Recursers' endless generosity, and to RC's unique
dynamics, I learned a lot over the 6 weeks of my batch; as importantly, my
eagerness to learn has not abated since.

# Cats

The category theory interest group I've been attending at RC has taken
advantage of the arrival of new joiners from the Fall 2 batch to do a reset of
sorts and switch texts.  We're now using [the second edition of Lawvere and
Schanuel's Conceptual
Mathematics](https://www.cambridge.org/us/universitypress/subjects/mathematics/logic-categories-and-sets/conceptual-mathematics-first-introduction-categories-2nd-edition),
which I have found to be very clear and pleasant so far. [Milewski's Category
Theory for
Programmers](https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/),
our previous text, we found to be a bit lacking in mathematical detail, a
deliberate choice from the author that didn't work well for us, in spite of the
wonderful clarifications our fellow member [Lucy](https://lucymcphail.com) has
kept providing, with unstinting precision and cheerfulness!

Still, I found Milewski's coding challenges fun. The similarity between the
Haskell examples and solutions I wrote in Rust was interesting to note, too,
albeit, in the main, unsurprising, owing to Rust's FP-supporting facilities,
[many of which stem from ML dialects or Haskell
itself](https://doc.rust-lang.org/reference/influences.html). A fellow member
of the group observed that the Rust code was essentially a noisier version of
the Haskell one, which seems fair: Rust requires (at times many) more
annotations than Haskell does.


